#version 330 core

in vec2 UV;
in vec3 Position_worldspace;
in vec3 Normal_cameraspace;
in vec3 EyeDirection_cameraspace;
in vec3 LightDirection_cameraspace;
in vec3 botaoAmareloLightDirection_cameraspace;
in vec3 botaoAzulLightDirection_cameraspace;
in vec3 botaoVerdeLightDirection_cameraspace;
in vec3 botaoVermelhoLightDirection_cameraspace;

out vec3 color;

uniform sampler2D myTextureSampler;
uniform mat4 MV;
uniform vec3 LightPosition_worldspace;
uniform vec3 botaoAmareloLightPosition;
uniform vec3 botaoAzulLightPosition;
uniform vec3 botaoVerdeLightPosition;
uniform vec3 botaoVermelhoLightPosition;
uniform float botaoAmareloLightPower;
uniform float botaoAzulLightPower;
uniform float botaoVerdeLightPower;
uniform float botaoVermelhoLightPower;

void main()
{
	vec3 LightColorRed = vec3(1, 0, 0);
	vec3 LightColorBlue = vec3(0, 0, 1);
	vec3 LightColorGreen = vec3(0, 1, 0);
	vec3 LightColorWhite = vec3(1, 1, 1);
	vec3 LightColorYellow = vec3(1, 1, 0);

	float defaultLightPower = 100.0f;

	vec3 MaterialDiffuseColor = texture(myTextureSampler, UV).rgb;
	vec3 MaterialAmbientColor = vec3(0.1,0.1,0.1) * MaterialDiffuseColor;
	vec3 MaterialSpecularColor = vec3(0.3,0.3,0.3);

	float distance = length(LightPosition_worldspace - Position_worldspace);

	vec3 n = normalize(Normal_cameraspace);

	vec3 l = normalize(LightDirection_cameraspace);

	float cosTheta = clamp(dot(n, l), 0, 1);

	vec3 E = normalize(EyeDirection_cameraspace);

	vec3 R = reflect(-l,n);

	float cosAlpha = clamp(dot(E, R), 0, 1);

    color =
		MaterialAmbientColor +

		MaterialDiffuseColor * LightColorWhite * defaultLightPower * cosTheta / (distance*distance) +
		MaterialSpecularColor * LightColorWhite * defaultLightPower * pow(cosAlpha,5) / (distance*distance);

    if (vec3(0, 0, 0) != botaoAmareloLightPosition) {
	    float botaoAmareloDistance = length(botaoAmareloLightPosition - Position_worldspace);

	    vec3 botaoAmareloL = normalize(botaoAmareloLightDirection_cameraspace);
	    float botaoAmareloCosTheta = clamp(dot(n, botaoAmareloL), 0, 1);

	    vec3 botaoAmareloR = reflect(-botaoAmareloL, n);
	    float botaoAmareloCosAlpha = clamp(dot(E, botaoAmareloR), 0, 1);

        color +=
            MaterialDiffuseColor * LightColorYellow * botaoAmareloLightPower * botaoAmareloCosTheta / (botaoAmareloDistance*botaoAmareloDistance) +
            MaterialSpecularColor * LightColorYellow * botaoAmareloLightPower * pow(botaoAmareloCosAlpha,5) / (botaoAmareloDistance*botaoAmareloDistance);
    }

    if (vec3(0, 0, 0) != botaoAzulLightPosition) {
        float botaoAzulDistance = length(botaoAzulLightPosition - Position_worldspace);

        vec3 botaoAzulL = normalize(botaoAzulLightDirection_cameraspace);
        float botaoAzulCosTheta = clamp(dot(n, botaoAzulL), 0, 1);

        vec3 botaoAzulR = reflect(-botaoAzulL, n);
        float botaoAzulCosAlpha = clamp(dot(E, botaoAzulR), 0, 1);

        color +=
            MaterialDiffuseColor * LightColorBlue * botaoAzulLightPower * botaoAzulCosTheta / (botaoAzulDistance*botaoAzulDistance) +
            MaterialSpecularColor * LightColorBlue * botaoAzulLightPower * pow(botaoAzulCosAlpha,5) / (botaoAzulDistance*botaoAzulDistance);
    }

    if (vec3(0, 0, 0) != botaoVerdeLightPosition) {
        float botaoVerdeDistance = length(botaoVerdeLightPosition - Position_worldspace);

        vec3 botaoVerdeL = normalize(botaoVerdeLightDirection_cameraspace);
        float botaoVerdeCosTheta = clamp(dot(n, botaoVerdeL), 0, 1);

        vec3 botaoVerdeR = reflect(-botaoVerdeL, n);
        float botaoVerdeCosAlpha = clamp(dot(E, botaoVerdeR), 0, 1);

        color +=
            MaterialDiffuseColor * LightColorGreen * botaoVerdeLightPower * botaoVerdeCosTheta / (botaoVerdeDistance*botaoVerdeDistance) +
            MaterialSpecularColor * LightColorGreen * botaoVerdeLightPower * pow(botaoVerdeCosAlpha,5) / (botaoVerdeDistance*botaoVerdeDistance);
    }

    if (vec3(0, 0, 0) != botaoVermelhoLightPosition) {
        float botaoVermelhoDistance = length(botaoVermelhoLightPosition - Position_worldspace);

        vec3 botaoVermelhoL = normalize(botaoVermelhoLightDirection_cameraspace);
        float botaoVermelhoCosTheta = clamp(dot(n, botaoVermelhoL), 0, 1);

        vec3 botaoVermelhoR = reflect(-botaoVermelhoL, n);
        float botaoVermelhoCosAlpha = clamp(dot(E, botaoVermelhoR), 0, 1);

        color +=
            MaterialDiffuseColor * LightColorRed * botaoVermelhoLightPower * botaoVermelhoCosTheta / (botaoVermelhoDistance*botaoVermelhoDistance) +
            MaterialSpecularColor * LightColorRed * botaoVermelhoLightPower * pow(botaoVermelhoCosAlpha,5) / (botaoVermelhoDistance*botaoVermelhoDistance);
    }
}
