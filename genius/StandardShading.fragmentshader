#version 330 core

in vec2 UV;
in vec3 Position_worldspace;
in vec3 Normal_cameraspace;
in vec3 EyeDirection_cameraspace;
in vec3 LightDirection_cameraspace;
in vec3 botaoAmareloLightDirection_cameraspace;
in vec3 botaoAzulLightDirection_cameraspace;
in vec3 botaoVerdeLightDirection_cameraspace;
in vec3 botaoVermelhoLightDirection_cameraspace;

out vec3 color;

uniform sampler2D myTextureSampler;
uniform mat4 MV;
uniform vec3 LightPosition_worldspace;
uniform vec3 botaoAmareloLightPosition;
uniform vec3 botaoAzulLightPosition;
uniform vec3 botaoVerdeLightPosition;
uniform vec3 botaoVermelhoLightPosition;

void main()
{
	vec3 LightColorRed = vec3(1, 0, 0);
	vec3 LightColorBlue = vec3(0, 0, 1);
	vec3 LightColorGreen = vec3(0, 1, 0);
	vec3 LightColorWhite = vec3(1, 1, 1);
	vec3 LightColorYellow = vec3(1, 1, 0);

	float defaultLightPower = 100.0f;
	float buttonLightPower = 10.0f;

	vec3 MaterialDiffuseColor = texture(myTextureSampler, UV).rgb;
	vec3 MaterialAmbientColor = vec3(0.1,0.1,0.1) * MaterialDiffuseColor;
	vec3 MaterialSpecularColor = vec3(0.3,0.3,0.3);


	float distance = length(LightPosition_worldspace - Position_worldspace);
	float botaoAmareloDistance = length(botaoAmareloLightPosition - Position_worldspace);
	float botaoAzulDistance = length(botaoAzulLightPosition - Position_worldspace);
	float botaoVerdeDistance = length(botaoVerdeLightPosition - Position_worldspace);
	float botaoVermelhoDistance = length(botaoVermelhoLightPosition - Position_worldspace);

	vec3 n = normalize(Normal_cameraspace);

	vec3 l = normalize(LightDirection_cameraspace);
	vec3 botaoAmareloL = normalize(botaoAmareloLightDirection_cameraspace);
	vec3 botaoAzulL = normalize(botaoAzulLightDirection_cameraspace);
	vec3 botaoVerdeL = normalize(botaoVerdeLightDirection_cameraspace);
	vec3 botaoVermelhoL = normalize(botaoVermelhoLightDirection_cameraspace);

	float cosTheta = clamp(dot(n, l), 0, 1);
	float botaoAmareloCosTheta = clamp(dot(n, botaoAmareloL), 0, 1);
	float botaoAzulCosTheta = clamp(dot(n, botaoAzulL), 0, 1);
	float botaoVerdeCosTheta = clamp(dot(n, botaoVerdeL), 0, 1);
	float botaoVermelhoCosTheta = clamp(dot(n, botaoVermelhoL), 0, 1);

	vec3 E = normalize(EyeDirection_cameraspace);

	vec3 R = reflect(-l,n);
	vec3 botaoAmareloR = reflect(-botaoAmareloL, n);
	vec3 botaoAzulR = reflect(-botaoAzulL, n);
	vec3 botaoVerdeR = reflect(-botaoVerdeL, n);
	vec3 botaoVermelhoR = reflect(-botaoVermelhoL, n);

	float cosAlpha = clamp(dot(E, R), 0, 1);
	float botaoAmareloCosAlpha = clamp(dot(E, botaoAmareloR), 0, 1);
	float botaoAzulCosAlpha = clamp(dot(E, botaoAzulR), 0, 1);
	float botaoVerdeCosAlpha = clamp(dot(E, botaoVerdeR), 0, 1);
	float botaoVermelhoCosAlpha = clamp(dot(E, botaoVermelhoR), 0, 1);

	color =
		MaterialAmbientColor +

		MaterialDiffuseColor * LightColorWhite * defaultLightPower * cosTheta / (distance*distance) +
		MaterialSpecularColor * LightColorWhite * defaultLightPower * pow(cosAlpha,5) / (distance*distance) +

		MaterialDiffuseColor * LightColorYellow * buttonLightPower * botaoAmareloCosTheta / (botaoAmareloDistance*botaoAmareloDistance) +
		MaterialSpecularColor * LightColorYellow * buttonLightPower * pow(botaoAmareloCosAlpha,5) / (botaoAmareloDistance*botaoAmareloDistance) +

		MaterialDiffuseColor * LightColorBlue * buttonLightPower * botaoAzulCosTheta / (botaoAzulDistance*botaoAzulDistance) +
		MaterialSpecularColor * LightColorBlue * buttonLightPower * pow(botaoAzulCosAlpha,5) / (botaoAzulDistance*botaoAzulDistance) +

		MaterialDiffuseColor * LightColorGreen * buttonLightPower * botaoVerdeCosTheta / (botaoVerdeDistance*botaoVerdeDistance) +
		MaterialSpecularColor * LightColorGreen * buttonLightPower * pow(botaoVerdeCosAlpha,5) / (botaoVerdeDistance*botaoVerdeDistance) +

		MaterialDiffuseColor * LightColorRed * buttonLightPower * botaoVermelhoCosTheta / (botaoVermelhoDistance*botaoVermelhoDistance) +
		MaterialSpecularColor * LightColorRed * buttonLightPower * pow(botaoVermelhoCosAlpha,5) / (botaoVermelhoDistance*botaoVermelhoDistance);
}
